#!perl
use strict;
use App::githook_perltidy;
use OptArgs2 qw/class_optargs/;

my ( $class, $opts ) = class_optargs('App::githook_perltidy');
eval "require $class" or die $@;
$class->new($opts)->run;

1;
__END__

=head1 NAME

githook-perltidy - run perltidy and podtidy before Git commits

=head1 VERSION

0.11.7_1 (yyyy-mm-dd)

=head1 SYNOPSIS

    githook-perltidy COMMAND [OPTIONS...]

=head1 DESCRIPTION

B<githook-perltidy> is a script designed to run from a Git pre-commit
hook. It ensures that your Perl and POD files are always cleanly
commited by running L<perltidy> and L<podtidy> on them.

This script is is efficient: it only modifies files that are being
committed and not every file in your repository. It also tries its
hardest to be safe: tidying is performed in a temporary location so
that your own working files are not left in a bad state in the event of
failure.

=head2 Repository Setup

Before you can use B<githook-perltidy> you need to make sure everyone
working on your code uses the the same tidy options:

    $ perltidy -b -w -dop | grep -v dump-options > .perltidyrc
    $ echo '--columns 72' > .podtidy-opts
    $ git add .perltidyrc .podtidy-opts
    $ git commit && git push

=head2 Installation

Anyone making commits in a setup repository can now add a call to
B<githook-perltidy> in their pre-commit script, or have
B<githook-perltidy> create one.

    githook-perltidy install [--force, -f] [MAKE ARGS]

The C<install> command must be run from the top-level directory of your
repository. It writes a F<pre-commit> file in the F<$GIT_DIR/hooks/>
directory. Any MAKE ARGS given will be added to the C<githook-perltidy
pre-commit> call.

    $ githook-perltidy install
    $ cat .git/hooks/pre-commit
    #!/bin/sh
    /usr/local/bin/githook-perltidy pre-commit

This command fails if there is no F<.perltidyrc> file in the repository
or if the hooks directory isn't found. It will also fail if the hook
file exists, unless C<--force> is used.

=head2 Pre-Commit Actions

The C<pre-commit> command checks out your index to a temporary working
directory. Runs L<perltidy> on any Perl files in the Git index using
the F<.perltidyrc>. If F<.podtidy-opts> exists then L<podtidy> will
also be run on any POD files in the Git index.  Any tidying errors stop
the commmit. Otherwise the index and your working tree are updated with
tidied files.

    githook-perltidy pre-commit [MAKE ARGS]

If any MAKE ARGS are given they will be passed to a L<make> call.  This
way you can ensure that your code passes a C<make test> or C<make
disttest> check before each commit.  If the PERLTIDY_MAKE environment
variable exists it will I<override> any arguments. Setting
PERLTIDY_MAKE="" will skip the make call entirely.

This command fails if there is no F<.perltidyrc> file in the
repository.

=head1 GLOBAL OPTIONS

=over

=item --verbose, -v

Print underlying Git commands or filesystem actions as they are run.

=back

=head1 CAVEATS

There are two ways in which B<githook-perltidy> behaviour may affect
your existing workflow. Firstly if you are accustomed to commiting
changes to files which are still open in your editor, your editor may
complain that the underlying file has changed on disk. Possibily your
editor doesn't even detect the change and your next write will not be
'tidy'.

Secondly, aborting a commit with an empty commit message or via a later
command in the pre-commit hook will still result in changed (tidied)
files on disk and in the index.

=head1 FILES

=over

=item F<.perltidyrc>

Perltidy command options file.

=item F<.podtidy-opts>

Podtidy command options file. This is githook-perltidy specific.

=back

=head1 SUPPORT

This tool is managed via github:

    https://github.com/mlawren/githook-perltidy

=head1 SEE ALSO

L<githooks>(5), L<perltidy>(1), L<podtidy>(1)

=head1 AUTHOR

Mark Lawrence E<lt>nomad@null.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011-2018 Mark Lawrence <nomad@null.net>

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

